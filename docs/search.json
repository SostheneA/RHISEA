[{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"run_hisea_estimates() function core component RHISEA package allows users build classification models seamlessly integrate results classical mixed-stock analysis framework originally implemented HISEA program. HISEA widely used estimate proportions different source populations (stocks) within mixed sample based known baseline data. combining classification outputs sophisticated estimators bootstrap procedures provide robust stock composition estimates along measures uncertainty.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"purpose-of-run_hisea_estimates","dir":"Articles","previous_headings":"Introduction","what":"Purpose of run_hisea_estimates()","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"function facilitates application classification algorithm outputs: Pseudo-class assignments mixture sample (.e., predicted class labels), Class likelihoods posterior probabilities mixture sample (probability belonging stock), confusion matrix phi matrix derived cross-validation baseline data, representing classification accuracy error rates. accepting key inputs, run_hisea_estimates() replicates five classical HISEA estimators: Raw estimator (based directly pseudo-classes) ML estimator. allows users combine modern custom classifiers trusted HISEA estimation framework, obtaining stock proportion estimates associated confidence measures directly comparable original HISEA output.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"what-you-need-to-provide","dir":"Articles","previous_headings":"Introduction","what":"What you need to provide","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"use run_hisea_estimates(), need supply following: pseudo_classes: integer vector predicted classes (one per mixture individual), produced classifier. likelihoods: numeric matrix posterior probabilities class likelihoods mixture individual across stocks (columns correspond stocks). phi_matrix: phi matrix (classification error matrix) computed cross-validation baseline data. matrix captures often stock classified stock, accounting misclassification rates. np: Number populations stocks baseline data. stocks_names: Character vector naming stock order. type: Estimation type, typically \"BOOTSTRAP\" bootstrap confidence intervals \"ANALYSIS\". Additional arguments output control, export_csv output_dir.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"how-it-works-internally","dir":"Articles","previous_headings":"Introduction","what":"How it works internally","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"function uses provided pseudo-classes likelihoods inputs five estimators implemented HISEA, incorporating phi matrix adjust classification uncertainty errors. runs bootstrap replicates compute confidence intervals standard deviations estimated stock proportions, enabling statistically sound inference.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"linear-discriminant-analysis-lda","dir":"Articles","previous_headings":"","what":"1. Linear Discriminant Analysis (LDA)","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"start classical parametric classifier, LDA, illustrate workflow.","code":"# Load required packages library(MASS) library(caret) library(reshape2) library(ggplot2) library(RHISEA)  # Load baseline and mixture data baseline_file <- system.file(\"extdata\", \"baseline.rda\", package = \"RHISEA\") mixture_file  <- system.file(\"extdata\", \"mixture.rda\",  package = \"RHISEA\")  load(baseline_file)  # loads `baseline` data.frame load(mixture_file)   # loads `mixture` data.frame  # Prepare baseline data baseline$population <- as.factor(baseline$population) stocks_names <- levels(baseline$population) np <- length(stocks_names)  # Define formula for classification formula <- population ~ d13c + d18o  # Function to perform stratified k-fold CV and compute phi matrix for LDA get_cv_results_lda <- function(data, formula, k = 10) {   set.seed(123)   folds <- createFolds(data$population, k = k, list = TRUE)      all_predictions <- factor(rep(NA, nrow(data)), levels = levels(data$population))   all_probabilities <- matrix(NA, nrow = nrow(data), ncol = length(levels(data$population)),                               dimnames = list(NULL, levels(data$population)))      for(i in seq_along(folds)) {     test_idx <- folds[[i]]     train_data <- data[-test_idx, ]     test_data <- data[test_idx, ]          model <- lda(formula, data = train_data)     pred <- predict(model, test_data)     all_predictions[test_idx] <- pred$class     all_probabilities[test_idx, ] <- pred$posterior   }      conf_matrix <- table(Predicted = all_predictions, Actual = data$population)   phi_matrix <- prop.table(conf_matrix, margin = 2)      list(confusion_matrix = conf_matrix,        phi_matrix = phi_matrix,        predictions = all_predictions,        probabilities = all_probabilities) }  # Run CV and get phi matrix lda_cv <- get_cv_results_lda(baseline, formula)  # Train full LDA model on baseline lda_model <- lda(formula, data = baseline)  # Prepare mixture data for prediction mix_data_prepared <- data.frame(   d13c = as.numeric(as.character(mixture$d13c_ukn)),   d18o = as.numeric(as.character(mixture$d18o_ukn)) )  # Predict classes and posterior probabilities for mixture lda_pred <- predict(lda_model, mix_data_prepared) lda_classes <- as.integer(lda_pred$class) lda_probs <- lda_pred$posterior  # Convert phi matrix to numeric matrix if needed phi_matrix_numeric <- as.matrix(lda_cv$phi_matrix) phi_matrix_numeric <- matrix(as.numeric(phi_matrix_numeric), nrow = nrow(phi_matrix_numeric), ncol = ncol(phi_matrix_numeric))  # Run HISEA estimates with LDA results lda_results <- run_hisea_estimates(   pseudo_classes = lda_classes,   likelihoods = lda_probs,   phi_matrix = phi_matrix_numeric,   np = np,   type = \"BOOTSTRAP\",   stocks_names = stocks_names,   export_csv = TRUE,   output_dir = \"results_lda\",   verbose = FALSE )  # Display results cat(\"\\nLDA Results - Mean Estimates:\\n\") ##  ## LDA Results - Mean Estimates: print(lda_results$mean_estimates) ##            RAW      COOK     COOKC        EM        ML ## East 0.3774489 0.3405903 0.3405903 0.3405905 0.3221202 ## West 0.6225511 0.6594097 0.6594097 0.6594095 0.6778798 cat(\"\\nLDA Results - Standard Deviations:\\n\") ##  ## LDA Results - Standard Deviations: print(lda_results$sd_estimates) ##              RAW        COOK       COOKC          EM          ML ## East 0.007156959 0.008194992 0.008194992 0.008194945 0.008626433 ## West 0.007156959 0.008194992 0.008194992 0.008194945 0.008626433 # Visualization of results results_long <- melt(lda_results$mean_estimates) colnames(results_long) <- c(\"Stock\", \"Method\", \"Proportion\")  ggplot(results_long, aes(x = Method, y = Proportion, fill = Stock)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   theme_minimal() +   labs(title = \"LDA Stock Proportion Estimates\",        y = \"Estimated Proportion\",        x = \"Estimation Method\") +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"random-forest-rf","dir":"Articles","previous_headings":"","what":"2. Random Forest (RF)","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"Next, apply Random Forest, powerful ensemble learning method.","code":"library(randomForest)  # Function to perform stratified k-fold CV and compute phi matrix for RF get_cv_results_rf <- function(data, formula, k = 10, ntree = 500) {   set.seed(123)   folds <- createFolds(data$population, k = k, list = TRUE)      all_predictions <- factor(rep(NA, nrow(data)), levels = levels(data$population))   all_probabilities <- matrix(NA, nrow = nrow(data), ncol = length(levels(data$population)),                               dimnames = list(NULL, levels(data$population)))      for(i in seq_along(folds)) {     test_idx <- folds[[i]]     train_data <- data[-test_idx, ]     test_data <- data[test_idx, ]          model <- randomForest(formula, data = train_data, ntree = ntree)     all_predictions[test_idx] <- predict(model, test_data)     all_probabilities[test_idx, ] <- predict(model, test_data, type = \"prob\")   }      conf_matrix <- table(Predicted = all_predictions, Actual = data$population)   phi_matrix <- prop.table(conf_matrix, margin = 2)      list(confusion_matrix = conf_matrix,        phi_matrix = phi_matrix,        predictions = all_predictions,        probabilities = all_probabilities) }  # Run CV and get phi matrix rf_cv <- get_cv_results_rf(baseline, formula, ntree = 500)  # Train full RF model on baseline rf_model <- randomForest(formula, data = baseline, ntree = 500)  # Predict classes and posterior probabilities for mixture rf_probs <- predict(rf_model, mix_data_prepared, type = \"prob\") rf_classes <- as.integer(predict(rf_model, mix_data_prepared))  # Run HISEA estimates with RF results rf_results <- run_hisea_estimates(   pseudo_classes = rf_classes,   likelihoods = rf_probs,   phi_matrix = rf_cv$phi_matrix,   np = np,   type = \"BOOTSTRAP\",   stocks_names = stocks_names,   export_csv = TRUE,   output_dir = \"results_rf\",   verbose = FALSE )  # Display results cat(\"\\nRandom Forest Results - Mean Estimates:\\n\") ##  ## Random Forest Results - Mean Estimates: print(rf_results$mean_estimates) ##            RAW      COOK     COOKC        EM        ML ## East 0.3783069 0.3794679 0.3794679 0.3794679 0.3518484 ## West 0.6216931 0.6205321 0.6205321 0.6205321 0.6481516 cat(\"\\nRandom Forest Results - Standard Deviations:\\n\") ##  ## Random Forest Results - Standard Deviations: print(rf_results$sd_estimates) ##              RAW        COOK       COOKC          EM          ML ## East 0.007135641 0.007700332 0.007700332 0.007700327 0.008733984 ## West 0.007135641 0.007700332 0.007700332 0.007700327 0.008733984 # Visualization of results results_long <- melt(rf_results$mean_estimates) colnames(results_long) <- c(\"Stock\", \"Method\", \"Proportion\")  ggplot(results_long, aes(x = Method, y = Proportion, fill = Stock)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   theme_minimal() +   labs(title = \"Random Forest Stock Proportion Estimates\",        y = \"Estimated Proportion\",        x = \"Estimation Method\") +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"conditional-inference-tree-ctree","dir":"Articles","previous_headings":"","what":"3. Conditional Inference Tree (CTREE)","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"Finally, demonstrate non-parametric tree method based permutation tests.","code":"library(party)  # Function to perform stratified k-fold CV and compute phi matrix for CTREE get_cv_results_ctree <- function(data, formula, k = 10) {   set.seed(123)   folds <- createFolds(data$population, k = k, list = TRUE)      all_predictions <- factor(rep(NA, nrow(data)), levels = levels(data$population))   all_probabilities <- matrix(NA, nrow = nrow(data), ncol = length(levels(data$population)),                               dimnames = list(NULL, levels(data$population)))      for(i in seq_along(folds)) {     test_idx <- folds[[i]]     train_data <- data[-test_idx, ]     test_data <- data[test_idx, ]          model <- ctree(formula, data = train_data)     pred_probs <- predict(model, test_data, type = \"prob\")     pred_probs_matrix <- do.call(rbind, pred_probs)     all_predictions[test_idx] <- predict(model, test_data)     all_probabilities[test_idx, ] <- pred_probs_matrix   }      conf_matrix <- table(Predicted = all_predictions, Actual = data$population)   phi_matrix <- prop.table(conf_matrix, margin = 2)      list(confusion_matrix = conf_matrix,        phi_matrix = phi_matrix,        predictions = all_predictions,        probabilities = all_probabilities) }  # Run CV and get phi matrix ctree_cv <- get_cv_results_ctree(baseline, formula)  # Train full CTREE model on baseline ctree_model <- ctree(formula, data = baseline,                      controls = ctree_control(mincriterion = 0.95,                                               minsplit = 20,                                               minbucket = 7))  # Predict classes and posterior probabilities for mixture ctree_probs <- predict(ctree_model, mix_data_prepared, type = \"prob\") ctree_probs_matrix <- do.call(rbind, ctree_probs) ctree_classes <- as.integer(predict(ctree_model, mix_data_prepared))  # Run HISEA estimates with CTREE results ctree_results <- run_hisea_estimates(   pseudo_classes = ctree_classes,   likelihoods = ctree_probs_matrix,   phi_matrix = ctree_cv$phi_matrix,   np = np,   type = \"BOOTSTRAP\",   stocks_names = stocks_names,   export_csv = TRUE,   output_dir = \"results_ctree\",   verbose = FALSE )  # Display results cat(\"\\nCTREE Results - Mean Estimates:\\n\") ##  ## CTREE Results - Mean Estimates: print(ctree_results$mean_estimates) ##            RAW      COOK     COOKC        EM        ML ## East 0.4027002 0.3894321 0.3894321 0.3894321 0.3295694 ## West 0.5972998 0.6105679 0.6105679 0.6105679 0.6704306 cat(\"\\nCTREE Results - Standard Deviations:\\n\") ##  ## CTREE Results - Standard Deviations: print(ctree_results$sd_estimates) ##            RAW        COOK       COOKC          EM          ML ## East 0.0073643 0.008368522 0.008368522 0.008368519 0.008819052 ## West 0.0073643 0.008368522 0.008368522 0.008368519 0.008819052 # Visualize tree and results plot(ctree_model) results_long <- melt(ctree_results$mean_estimates) colnames(results_long) <- c(\"Stock\", \"Method\", \"Proportion\")  ggplot(results_long, aes(x = Method, y = Proportion, fill = Stock)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   theme_minimal() +   labs(title = \"CTREE Stock Proportion Estimates\",        y = \"Estimated Proportion\",        x = \"Estimation Method\") +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://github.com/SostheneA/RHISEA/articles/Custom_Classification_Models.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Applying HISEA estimators to custom classification models with run_hisea_estimates","text":"vignette demonstrated : Prepare baseline mixture data, Perform stratified cross-validation estimate classification accuracy (phi matrix), Train various classifiers (LDA, RF, CTREE), Predict mixture sample classes posterior probabilities, Run run_hisea_estimates() get robust mixed-stock proportion estimates confidence intervals, Visualize interpret results. can extend approach classification method provides pseudo-classes posterior probabilities, leveraging classical HISEA framework within RHISEA package.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"vignette demonstrates perform comprehensive comparison multiple classification models mixed-stock analysis using RHISEA package. RHISEA extends classical HISEA mixed-stock analysis framework allowing users incorporate variety modern classifiers evaluate performance dataset. running provided automated classifier comparison script, able : Train validate diverse set classifiers baseline data, Apply classifiers mixture data, Obtain classical HISEA stock proportion estimates classifier, Automatically save log results, Summarize visualize performance metrics accuracy kappa, Compare classifier performances quantitatively visually.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"setup-and-required-libraries","dir":"Articles","previous_headings":"","what":"Setup and Required Libraries","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"","code":"library(RHISEA) library(RHISEA) library(writexl) library(mclust) library(ggplot2)  # --- 0. Install and load required libraries --- required_pkgs <- c(   \"dplyr\", \"ggplot2\", \"purrr\", \"mclust\", \"RHISEA\",   \"MASS\",       # for LDA/QDA   \"randomForest\", # for Random Forest   \"xgboost\",    # for XGBoost   \"e1071\",      # for SVM and Naive Bayes   \"class\",      # for k-NN   \"klaR\",       # for additional NB methods   \"partykit\",   # for CTree   \"nnet\",       # for multinom and ANN   \"caret\"       # for cross-validation utilities )  to_install <- setdiff(required_pkgs, rownames(installed.packages())) if (length(to_install)) install.packages(to_install)  suppressPackageStartupMessages({   library(dplyr)   library(ggplot2)   library(purrr)   library(mclust)   library(RHISEA)   library(MASS)   library(randomForest)   library(xgboost)   library(e1071)   library(class)   library(klaR)   library(partykit)   library(nnet)   library(caret) })"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"load-baseline-and-mixture-data","dir":"Articles","previous_headings":"","what":"Load Baseline and Mixture Data","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"baseline dataset contains known stock samples labeled population. mixture dataset contains unknown-origin samples assigned stocks.","code":"# Load baseline and mixture data baseline_file <- system.file(\"extdata\", \"baseline.rda\", package = \"RHISEA\") mixture_file  <- system.file(\"extdata\", \"mixture.rda\",  package = \"RHISEA\")  load(baseline_file)  # loads `baseline` data.frame load(mixture_file)   # loads `mixture` data.frame"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"define-analysis-parameters-and-output-setup","dir":"Articles","previous_headings":"","what":"Define Analysis Parameters and Output Setup","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"","code":"np <- 2               # Number of populations/stocks nv <- 2               # Number of variables used (e.g., isotopes) Nsamps <- 1000        # Number of bootstrap samples for estimation Nmix <- 100           # Number of mixture samples stock_labels <- c(\"East\", \"West\") resampled_baseline_sizes <- c(50, 50) resample_baseline <- TRUE  baseline$population <- as.factor(baseline$population) stocks_names <- levels(baseline$population) np <- length(stocks_names)  output_directory <- \"model_comparison\" log_file <- file.path(output_directory, \"comparison_log.txt\")  if (!dir.exists(output_directory)) dir.create(output_directory) cat(sprintf(\"[%s] Starting classifier comparison\\n\", Sys.time()),     file = log_file, append = TRUE)"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"supported-classifiers-to-evaluate","dir":"Articles","previous_headings":"","what":"Supported Classifiers to Evaluate","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"script supports following classifiers, integrated RHISEA’s run_hisea_all() wrapper: Linear Discriminant Analysis (LDA) Linear Discriminant Analysis via MASS package (LDA_MASS) Quadratic Discriminant Analysis (QDA) Random Forest (RF) Extreme Gradient Boosting (XGB) Support Vector Machine (SVM) k-Nearest Neighbors (KNN) Artificial Neural Network (ANN) Naive Bayes (NB) Model-based Clustering (MCLUST) Multinomial Logistic Regression (MLR)","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"run-automated-classifier-comparison","dir":"Articles","previous_headings":"","what":"Run Automated Classifier Comparison","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"loop runs classifier, performs mixed-stock analysis using RHISEA’s HISEA estimators, saves results separate subfolders, logs errors occur.","code":"# --- 3. Supported classifiers in run_hisea_all() --- models_to_run <- c(   \"LDA\",        # custom LDF   \"LDA_MASS\",   # MASS::lda   \"QDA\",        # MASS::qda   \"RF\",         # randomForest  # \"XGB\",         # xgboost::xgb.DMatrix   \"SVM\",        # e1071::svm   \"KNN\",        # class::knn   \"ANN\",        # nnet::nnet   \"NB\",         # e1071::naiveBayes  # \"MCLUST\",     # mclust::MclustDA   \"MLR\"         # nnet::multinom )  all_results <- list()  # --- 4. Helper: extract performance metrics safely --- extract_metrics <- function(res) {   if (is.null(res) || inherits(res, \"error\")) return(NULL)   cv_res <- res$baseline_classification_quality$cv_results   if (!is.null(cv_res)) {     return(data.frame(       Accuracy = mean(cv_res$Accuracy, na.rm = TRUE),       Kappa    = mean(cv_res$Kappa,    na.rm = TRUE),       F1_Score = if (\"Mean_F1\" %in% names(cv_res)) {         mean(cv_res$Mean_F1, na.rm = TRUE)       } else NA_real_     ))   }   qual <- res$baseline_classification_quality   if (!is.null(qual)) {     f1_vals <- qual$f1_by_class     return(data.frame(       Accuracy = qual$accuracy,       Kappa    = qual$kappa,       F1_Score = if (is.numeric(f1_vals)) mean(f1_vals, na.rm = TRUE) else NA_real_     ))   }   NULL }  # --- 5. Loop over classifiers --- message(\"Launching comparative analysis for \", length(models_to_run), \" classifiers...\\n\") for (i in seq_along(models_to_run)) {   model <- models_to_run[i]   message(\"-> Running model: \", model)      # Create subdirectory for this model   model_dir <- file.path(output_directory, model)   if (!dir.exists(model_dir)) dir.create(model_dir)      # Run the HISEA analysis   result <- tryCatch(     run_hisea_all(       type                    = \"ANALYSIS\",       np                      = np,       nv                      = nv,       resample_baseline       = resample_baseline,       resampled_baseline_sizes= resampled_baseline_sizes,       seed_val                = 123456,       nsamps                  = Nsamps,       Nmix                    = Nmix,       baseline_input = baseline,       mix_input  = mixture,       method_class            = model,       stocks_names = stock_labels,        stock_col = \"population\",       var_cols_std = c(\"d13c\", \"d18o\"),         var_cols_mix = c(\"d13c_ukn\" ,\"d18o_ukn\"),       export_csv              = TRUE,       output_dir              = model_dir,       verbose                 = FALSE,       phi_method = c(\"standard\", \"cv\")[2]     ),     error = function(e) {       msg <- sprintf(\"[%s] ERROR in %s: %s\\n\", Sys.time(), model, e$message)       cat(msg, file = log_file, append = TRUE)       message(\"  ✖ Error occurred; logged.\")       structure(list(error = e), class = \"error\")     }   )      all_results[[model]] <- result }"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"summarize-and-visualize-classifier-performance","dir":"Articles","previous_headings":"","what":"Summarize and Visualize Classifier Performance","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"","code":"# Load saved .rda result files from all models rda_files <- list.files(output_directory, pattern = \"result_.*\\\\.rda$\", recursive = TRUE, full.names = TRUE)  extract_metrics_from_rda <- function(rda_path) {   load(rda_path)  # loads 'out'   model_name <- gsub(\".*result_(.*)\\\\.rda$\", \"\\\\1\", rda_path)      if (!is.null(out$baseline_classification_quality)) {     acc <- out$baseline_classification_quality$accuracy     kappa <- out$baseline_classification_quality$kappa     return(data.frame(Model = model_name, Accuracy = round(acc, 3), Kappa = round(kappa, 3)))   }   return(NULL) }  performance_summary <- purrr::map_dfr(rda_files, extract_metrics_from_rda) print(performance_summary) ##                               Model Accuracy Kappa ## 1      KNN_ANALYSIS_20250819_044416    0.940 0.880 ## 2      LDA_ANALYSIS_20250819_041502    0.937 0.873 ## 3 LDA_MASS_ANALYSIS_20250819_041533    0.937 0.873 ## 4      MLR_ANALYSIS_20250819_045440    0.937 0.873 ## 5       NB_ANALYSIS_20250819_045312    0.947 0.893 ## 6      QDA_ANALYSIS_20250819_041602    0.943 0.887 ## 7       RF_ANALYSIS_20250819_042741    0.963 0.927 ## 8      SVM_ANALYSIS_20250819_043329    0.953 0.907"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"plot-accuracy-and-kappa-for-each-model","dir":"Articles","previous_headings":"","what":"Plot Accuracy and Kappa for Each Model","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"","code":"library(ggplot2)  ggplot(performance_summary, aes(x = reorder(Model, Accuracy), y = Accuracy)) +   geom_col(fill = \"steelblue\") +   coord_flip() +   labs(title = \"Classifier Accuracy Comparison\",        x = \"Classifier Model\", y = \"Accuracy\") +   theme_minimal() ggplot(performance_summary, aes(x = reorder(Model, Kappa), y = Kappa)) +   geom_col(fill = \"darkorange\") +   coord_flip() +   labs(title = \"Classifier Kappa Comparison\",        x = \"Classifier Model\", y = \"Kappa\") +   theme_minimal()"},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"approach provides powerful way evaluate compare multiple classification methods mixed-stock analysis, enabling select accurate reliable model specific dataset. RHISEA package’s integration modern classifiers classical HISEA estimation provides flexibility statistical rigor, empowering fisheries ecological researchers improve stock composition estimates.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/Multiple_Classifiers.html","id":"appendix-additional-visualizations-and-statistics","dir":"Articles","previous_headings":"","what":"Appendix: Additional Visualizations and Statistics","title":"Comparing built-in classification methods in RHISEA for mixed-stock analysis","text":"Boxplots, trends time, correlation metrics, heatmaps can added similarly explore classifier performance. Saved CSVs .rda files allow detailed post-hoc analyses reproducibility.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"vignette demonstrates two equivalent ways run run_hisea_all() RHISEA package: Data frame inputs (R objects baseline mixture already loaded), HISEA file inputs (hisea.std hisea.mix files). run analysis LDA classifier compare results (means, bootstrap distributions, etc.). vignette explains differences, shows reproducible code, provides interpretation guidance.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"required-packages","dir":"Articles","previous_headings":"","what":"Required packages","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"","code":"library(RHISEA) #> RHISEA loaded successfully library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ lubridate 1.9.4     ✔ tibble    3.3.0 #> ✔ purrr     1.1.0     ✔ tidyr     1.3.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::combine()       masks randomForest::combine() #> ✖ dplyr::filter()        masks stats::filter() #> ✖ dplyr::lag()           masks stats::lag() #> ✖ purrr::lift()          masks caret::lift() #> ✖ purrr::map()           masks mclust::map() #> ✖ randomForest::margin() masks ggplot2::margin() #> ✖ dplyr::select()        masks MASS::select() #> ✖ dplyr::slice()         masks xgboost::slice() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(data.table) #>  #> Attaching package: 'data.table' #>  #> The following objects are masked from 'package:lubridate': #>  #>     hour, isoweek, mday, minute, month, quarter, second, wday, week, #>     yday, year #>  #> The following objects are masked from 'package:dplyr': #>  #>     between, first, last #>  #> The following object is masked from 'package:purrr': #>  #>     transpose library(mclust)     # used by some RHISEA internals or for post-analysis"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"","code":"# Option A: load .rda saved objects (development) baseline_file <- system.file(\"extdata\", \"baseline.rda\", package = \"RHISEA\") mixture_file  <- system.file(\"extdata\", \"mixture.rda\",  package = \"RHISEA\")  load(baseline_file)  # loads `baseline` data.frame load(mixture_file)   # loads `mixture` data.frame  # Quick checks stopifnot(is.data.frame(baseline) || is.data.table(baseline)) stopifnot(is.data.frame(mixture) || is.data.table(mixture))  str(baseline) #> Classes 'data.table' and 'data.frame':   300 obs. of  3 variables: #>  $ d13c      : num  -7.99 -8.23 -7.99 -7.32 -9.01 -8.19 -8.48 -8.42 -8.02 -7.9 ... #>  $ d18o      : num  -0.46 -0.58 -0.89 -1.06 -0.89 -1.25 -0.27 -0.72 -0.74 -0.51 ... #>  $ population: Factor w/ 2 levels \"East\",\"West\": 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \".internal.selfref\")=<externalptr> str(mixture) #> tibble [4,500 × 2] (S3: tbl_df/tbl/data.frame) #>  $ d13c_ukn: chr [1:4500] \"-8.6\" \"-8.8362287144933909\" \"-8.48\" \"-8.6199999999999992\" ... #>  $ d18o_ukn: chr [1:4500] \"-1.1599999999999999\" \"-1.3548853367293201\" \"-0.93\" \"-1.91\" ...  # Ensure variable names expected by run_hisea_all # baseline should include: d13c, d18o, population # mixture should include: d13c_ukn, d18o_ukn"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"write-hisea-formatted-files-optional","dir":"Articles","previous_headings":"","what":"Write HISEA formatted files (optional)","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"want compare HISEA text format, write files data frames:","code":"write_std_from_dataframe(df = baseline, stock_col = \"population\", var_cols = c(\"d13c\", \"d18o\")) write_mix_from_dataframe(df = mixture, var_cols = c(\"d13c_ukn\", \"d18o_ukn\"))  # files created in working directory: \"hisea.std\", \"hisea.mix\" list.files(pattern = \"hisea\\\\.(std|mix)$\") #> [1] \"hisea.mix\" \"hisea.std\""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"analysis-parameters","dir":"Articles","previous_headings":"","what":"Analysis parameters","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"","code":"np <- 2 nv <- 2 Nsamps <- 1000     # number of bootstrap/resampling iterations inside run_hisea_all (depends on function) Nmix <- 100 baseline_file <- \"hisea.std\" mixture_file <- \"hisea.mix\" stock_labels <- c(\"East\", \"West\") stocks_names <- c(\"East\", \"West\") resample_baseline <- TRUE resampled_baseline_sizes <- c(50, 50)  # set seed for reproducibility seed_val <- 123456"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"run-with-data-frame-inputs","dir":"Articles","previous_headings":"","what":"1) Run with Data frame inputs","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"block Runs analysis using -memory baseline mixture objects. DataFrame_option$mean contain estimated mean mixture composition (e.g., estimated proportions East West) averaged across resamples. DataFrame_option$boot (present) might contain bootstrap distribution estimates — used compute CI, sd, etc.","code":"DataFrame_option <- run_hisea_all(   type = \"ANALYSIS\",   np = np,   phi_method = \"cv\",         # chosen in your script: cv or standard; we use \"cv\" here   nv = nv,   resample_baseline = resample_baseline,   resampled_baseline_sizes = resampled_baseline_sizes,   seed_val = seed_val,   nsamps = Nsamps,   Nmix = Nmix,   baseline_input = baseline,   mix_input = mixture,   method_class = \"LDA\",   stocks_names = stock_labels,    stock_col = \"population\",   var_cols_std = c(\"d13c\", \"d18o\"),     var_cols_mix = c(\"d13c_ukn\", \"d18o_ukn\") ) #> Warning in run_hisea_all(type = \"ANALYSIS\", np = np, phi_method = \"cv\", : #> resample_baseline only for SIMULATION/BOOTSTRAP; disabling.  # Print summary statistics print(\"Data frame input — mean estimates:\") #> [1] \"Data frame input — mean estimates:\" print(round(DataFrame_option$mean, 4)) #>         RAW   COOK  COOKC     EM     ML #> East 0.3771 0.3402 0.3402 0.3402 0.3217 #> West 0.6229 0.6598 0.6598 0.6598 0.6783  # If the object contains bootstrap results, show a small summary if (!is.null(DataFrame_option$boot) ) {   cat(\"\\nBootstrap summary (data frame input):\\n\")   print(summary(DataFrame_option$boot)) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"run-with-hisea-formatted-files","dir":"Articles","previous_headings":"","what":"2) Run with HISEA-formatted files","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"expect write_std_from_dataframe() / write_mix_from_dataframe() produced identical formatted files -memory data, results extremely similar. Small differences can arise formatting, row order, numeric rounding. results differ substantially, see Troubleshooting .","code":"HiseaFormat_option <- run_hisea_all(   type = \"ANALYSIS\",   np = np,   phi_method = \"cv\",   nv = nv,   resample_baseline = resample_baseline,   resampled_baseline_sizes = resampled_baseline_sizes,   seed_val = seed_val,   nsamps = Nsamps,   Nmix = Nmix,   baseline_input = baseline_file,   mix_input  = mixture_file,   method_class = \"LDA\",   stocks_names = stock_labels ) #> Warning in run_hisea_all(type = \"ANALYSIS\", np = np, phi_method = \"cv\", : #> resample_baseline only for SIMULATION/BOOTSTRAP; disabling.  print(\"HISEA file input — mean estimates:\") #> [1] \"HISEA file input — mean estimates:\" print(round(HiseaFormat_option$mean, 4)) #>         RAW   COOK  COOKC     EM     ML #> East 0.3771 0.3402 0.3402 0.3402 0.3217 #> West 0.6229 0.6598 0.6598 0.6598 0.6783  if (!is.null(HiseaFormat_option$boot) ) {   cat(\"\\nBootstrap summary (HISEA file input):\\n\")   print(summary(HiseaFormat_option$boot)) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"compare-results-table-plot","dir":"Articles","previous_headings":"","what":"Compare results: table + plot","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"section produces comparison table simple plot mean estimates differences. Comparison estimates: Data frame vs HISEA file","code":"# collect means df_compare <- tibble(   mean_df = as.numeric(DataFrame_option$mean),   mean_file = as.numeric(HiseaFormat_option$mean) ) %>%   mutate(diff = mean_df - mean_file)  kable(df_compare, digits = 4, caption = \"Comparison of estimates: Data frame vs HISEA file\") # Plot side-by-side bars df_plot <- df_compare %>% pivot_longer(cols = c(mean_df, mean_file), names_to = \"input_type\", values_to = \"estimate\")"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"visualize-bootstrap-distributions-if-available","dir":"Articles","previous_headings":"","what":"Visualize bootstrap distributions (if available)","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"objects returned contain bootstrap distributions (common nsamps used), plot histograms/density stock input type:","code":"DataFrame_option_boot <- run_hisea_all(   type = \"BOOTSTRAP\",   np = np,   phi_method = \"cv\",         # chosen in your script: cv or standard; we use \"cv\" here   nv = nv,   resample_baseline = resample_baseline,   resampled_baseline_sizes = resampled_baseline_sizes,   seed_val = seed_val,   nsamps = Nsamps,   Nmix = Nmix,   baseline_input = baseline,   mix_input = mixture,   method_class = \"LDA\",   stocks_names = stock_labels,    stock_col = \"population\",   var_cols_std = c(\"d13c\", \"d18o\"),     var_cols_mix = c(\"d13c_ukn\", \"d18o_ukn\") )  HiseaFormat_option_boot <- run_hisea_all(   type = \"BOOTSTRAP\",   np = np,   phi_method = \"cv\",   nv = nv,   resample_baseline = resample_baseline,   resampled_baseline_sizes = resampled_baseline_sizes,   seed_val = seed_val,   nsamps = Nsamps,   Nmix = Nmix,   baseline_input = baseline_file,   mix_input  = mixture_file,   method_class = \"LDA\",   stocks_names = stock_labels )  make_boot_df <- function(boot_obj, label){   if (is.null(boot_obj)) return(NULL)   # adapt depending on structure   boot_mat <- as.matrix(boot_obj)  # try to coerce   df <- as.data.frame(boot_mat)   names(df) <- stock_labels[1:ncol(df)]   df_long <- pivot_longer(df, cols = everything(), names_to = \"stock\", values_to = \"estimate\")   df_long$input <- label   df_long }  boot_df1 <- make_boot_df(DataFrame_option_boot$boot, \"data_frame\") boot_df2 <- make_boot_df(HiseaFormat_option_boot$boot, \"hisea_file\") boot_all <- bind_rows(boot_df1, boot_df2)  if (!is.null(boot_all) && nrow(boot_all) > 0) {   ggplot(boot_all, aes(x = estimate)) +     geom_density() +     facet_grid(stock ~ input, scales = \"free\") +     labs(title = \"Bootstrap distributions by stock and input type\") }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_data_type.html","id":"interpretation-reasoning-how-to-read-results","dir":"Articles","previous_headings":"","what":"Interpretation & Reasoning (how to read results)","title":"Two input paths in RHISEA: run_hisea_all with HISEA-style files or Dataframes","text":"Mean estimates ($mean): estimated proportions stock mixture averaged across resamples. Example: mean = c(0.87, 0.13) indicate 87% East, 13% West. Bootstrap distributions: provide variability — use compute 95% CI sd. bootstrap distributions DataFrame_option HiseaFormat_option overlap strongly mean differences tiny, two input modes effectively equivalent.","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"vignette demonstrates full workflow : Load baseline mixture data package inst/extdata/ Simulate multiple datasets mimicking mixed-stock fishery data Run HISEA estimators R (run_hisea_all LDA LDA_MASS methods) Run Fortran executable (assumed available hisea.exe) comparison Aggregate visualize estimator results (R vs Fortran) Export results Excel Perform simple diagnostics detect large discrepancies methods","code":""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"load-baseline-and-mixture-data-from-installed-package","dir":"Articles","previous_headings":"","what":"1. Load baseline and mixture data from installed package","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"store data inst/extdata/ ensure users can reproduce analysis installation.","code":"baseline_file <- system.file(\"extdata\", \"baseline.rda\", package = \"RHISEA\") mixture_file  <- system.file(\"extdata\", \"mixture.rda\",  package = \"RHISEA\")  load(baseline_file)  # loads `baseline` data.frame load(mixture_file)   # loads `mixture` data.frame  # Convert baseline and mixture into HISEA file formats (.std and .mix) write_std_from_dataframe(df=baseline, stock_col = \"population\", var_cols = c(\"d13c\", \"d18o\")) write_mix_from_dataframe(df=mixture, var_cols = c(\"d13c_ukn\", \"d18o_ukn\"))"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"define-global-parameters-for-simulation-and-analysis","dir":"Articles","previous_headings":"","what":"2. Define global parameters for simulation and analysis","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"np <- 2     # Number of populations (stocks) nv <- 2     # Number of isotopic variables Nsamps <- 1000  # Number of baseline resamples per simulation Nmix <- 100     # Number of mixture individuals per simulation stock_labels <- c(\"East\", \"West\") resample_baseline <- FALSE resampled_baseline_sizes <- c(50, 50) baseline_std_file <- \"hisea.std\" mixture_mix_file <- \"hisea.mix\""},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"utility-functions-for-readingwriting-hisea-files-and-fortran-outputs","dir":"Articles","previous_headings":"","what":"3. Utility functions for reading/writing HISEA files and Fortran outputs","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"# Read baseline and mixture files, split by stocks read_base_std_mix <- function(std_path, mix_path) {   std_lines <- readLines(std_path)   mix_lines <- readLines(mix_path)   split_index <- which(grepl(\"NEXT STOCK\", std_lines, ignore.case = TRUE))   end_std <- which(grepl(\"End of baseline data\", std_lines, ignore.case = TRUE))   stock1_base <- std_lines[1:(split_index - 1)]   stock2_base <- std_lines[(split_index + 1):(end_std - 1)]   end_mix <- which(grepl(\"End of mixed sample\", mix_lines, ignore.case = TRUE))   mix_base <- mix_lines[1:(end_mix - 1)]   list(stock1 = stock1_base, stock2 = stock2_base, mix = mix_base) }  # Write baseline (.std) file from list of matrices write_std <- function(filepath, stock_list) {   con <- file(filepath, \"w\")   for (i in seq_along(stock_list)) {     apply(stock_list[[i]], 1, function(row) writeLines(paste(row, collapse = \" \"), con))     if (i < length(stock_list)) writeLines(\"NEXT STOCK\", con)   }   writeLines(\"End of baseline data\", con)   writeLines(\"End of file\", con)   close(con) }  # Write mixture (.mix) file from matrix write_mix <- function(filepath, data) {   con <- file(filepath, \"w\")   apply(data, 1, function(row) writeLines(paste(row, collapse = \" \"), con))   writeLines(\"End of mixed sample\", con)   writeLines(\"End of file\", con)   close(con) }  # Read estimator results from Fortran output files, returns numeric vector of length 2 or NA read_fort_estimator <- function(file_path) {   if (!file.exists(file_path)) return(c(NA, NA))   line <- readLines(file_path, warn = FALSE)[1]   vals <- as.numeric(unlist(strsplit(trimws(line), \"\\\\s+\")))   if (length(vals) == 2) return(vals) else return(c(NA, NA)) }  # Generate Poisson distributed baseline stock data for simulation generate_stock_data <- function(n, n_vars, base_lambda_val) {   if (base_lambda_val <= 0) base_lambda_val <- 0.1   matrix(rpois(n * n_vars, lambda = base_lambda_val), ncol = n_vars) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"simulation-setup-and-results-containers","dir":"Articles","previous_headings":"","what":"4. Simulation setup and results containers","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"simulate 50 datasets, run R estimators Fortran executable, store results.","code":"# For reproducible parallel RNG streams RNGkind(\"L'Ecuyer-CMRG\") set.seed(42) n_sim <- 50  results <- list()     # R LDA results results2 <- list()    # R LDA_MASS results est_wide_comparisons <- vector(\"list\", 5)  # 5 estimators to compare est_long_comparisons <- vector(\"list\", 5)  for (j in 1:5) {   est_wide_comparisons[[j]] <- data.frame()   est_long_comparisons[[j]] <- data.frame() }  # Precompute RNG streams for independent simulations streams <- vector(\"list\", n_sim) streams[[1]] <- .Random.seed for (i in 2:n_sim) {   streams[[i]] <- parallel::nextRNGStream(streams[[i - 1]]) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"main-simulation-loop","dir":"Articles","previous_headings":"","what":"5. Main simulation loop","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"for (i in 1:n_sim) {   cat(\"\\n--- Simulation \", i, \" ---\\n\")    # Activate independent RNG stream for reproducibility   .Random.seed <- streams[[i]]    # Simulate baseline stock data with slightly different lambda values per stock   base_lambda_stock1 <- runif(1, 15, 25)   lambda_shift_stock2 <- runif(1, 5, 15)   stock1_data <- generate_stock_data(100, nv, base_lambda_stock1)   stock2_data <- generate_stock_data(100, nv, base_lambda_stock1 + lambda_shift_stock2)    # Write baseline to .std file   write_std(baseline_std_file, list(stock1_data, stock2_data))    # Generate mixture based on random proportions   current_sim_comp <- as.numeric(gtools::rdirichlet(1, alpha = rep(1, np)))   n_from_stocks <- round(Nmix * current_sim_comp)   if (sum(n_from_stocks) != Nmix) n_from_stocks[1] <- n_from_stocks[1] + (Nmix - sum(n_from_stocks))    mixture_data <- rbind(     stock1_data[sample(nrow(stock1_data), n_from_stocks[1], replace = TRUE), ],     stock2_data[sample(nrow(stock2_data), n_from_stocks[2], replace = TRUE), ]   )   mixture_data <- mixture_data[sample(nrow(mixture_data)), ]    # Write mixture to .mix file   write_mix(mixture_mix_file, mixture_data)    # Run Fortran HISEA executable   system(\"hisea.exe\", wait = TRUE)   out_file <- sprintf(\"hisea%02d.out\", i)   if (file.exists(\"hisea.out\")) file.rename(\"hisea.out\", out_file)    # Run R-based estimations with LDA and LDA_MASS   r_result <- run_hisea_all(     type = \"ANALYSIS\",     np = np,     phi_method = \"standard\",     nv = nv,     resample_baseline = resample_baseline,     resampled_baseline_sizes = resampled_baseline_sizes,     seed_val = 123456,     nsamps = Nsamps,     Nmix = Nmix,     baseline_input = baseline_std_file,     mix_input = mixture_mix_file,     method_class = \"LDA\",     stocks_names = stock_labels   )   r_df <- as.data.frame(r_result$mean)   colnames(r_df) <- paste0(\"Estimator_\", 1:5)   r_df$Stock <- stock_labels   r_df$Simulation <- paste0(\"Sim_\", i)   results[[i]] <- r_df    r_result2 <- run_hisea_all(     type = \"ANALYSIS\",     np = np,     phi_method = \"standard\",     nv = nv,     resample_baseline = resample_baseline,     resampled_baseline_sizes = resampled_baseline_sizes,     seed_val = 123456,     nsamps = Nsamps,     Nmix = Nmix,     baseline_input = baseline_std_file,     mix_input = mixture_mix_file,     method_class = \"LDA_MASS\",     stocks_names = stock_labels   )   r_df2 <- as.data.frame(r_result2$mean)   colnames(r_df2) <- paste0(\"Estimator_\", 1:5)   r_df2$Stock <- stock_labels   r_df2$Simulation <- paste0(\"Sim_\", i)   results2[[i]] <- r_df2    # Read Fortran estimators from fort.xx files (10 + estimator index)   fort_estimates <- lapply(1:5, function(j) read_fort_estimator(sprintf(\"fort.%02d\", 10 + j)))    # Store wide and long format comparisons for each estimator   for (j in 1:5) {     wide_df <- data.frame(       Simulation = paste0(\"Sim_\", i),       Stock = stock_labels,       R = r_df[[paste0(\"Estimator_\", j)]],       Mass = r_df2[[paste0(\"Estimator_\", j)]],       Fortran = fort_estimates[[j]]     )     est_wide_comparisons[[j]] <- rbind(est_wide_comparisons[[j]], wide_df)      long_df <- data.frame(       Simulation = rep(paste0(\"Sim_\", i), times = 6),       Estimate = paste0(\"Estimator_\", j),       Stock = rep(stock_labels, times = 3),       Method = rep(c(\"Fortran\", \"LDA_R\", \"LDA_MASS\"), each = 2),       Value = c(         fort_estimates[[j]],         r_df[[paste0(\"Estimator_\", j)]],         r_df2[[paste0(\"Estimator_\", j)]]       )     )     est_long_comparisons[[j]] <- rbind(est_long_comparisons[[j]], long_df)   } } #>  #> --- Simulation  1  --- #>  #> --- Simulation  2  --- #>  #> --- Simulation  3  --- #>  #> --- Simulation  4  --- #>  #> --- Simulation  5  --- #>  #> --- Simulation  6  --- #>  #> --- Simulation  7  --- #>  #> --- Simulation  8  --- #>  #> --- Simulation  9  --- #>  #> --- Simulation  10  --- #>  #> --- Simulation  11  --- #>  #> --- Simulation  12  --- #>  #> --- Simulation  13  --- #>  #> --- Simulation  14  --- #>  #> --- Simulation  15  --- #>  #> --- Simulation  16  --- #>  #> --- Simulation  17  --- #>  #> --- Simulation  18  --- #>  #> --- Simulation  19  --- #>  #> --- Simulation  20  --- #>  #> --- Simulation  21  --- #>  #> --- Simulation  22  --- #>  #> --- Simulation  23  --- #>  #> --- Simulation  24  --- #>  #> --- Simulation  25  --- #>  #> --- Simulation  26  --- #>  #> --- Simulation  27  --- #>  #> --- Simulation  28  --- #>  #> --- Simulation  29  --- #>  #> --- Simulation  30  --- #>  #> --- Simulation  31  --- #>  #> --- Simulation  32  --- #>  #> --- Simulation  33  --- #>  #> --- Simulation  34  --- #>  #> --- Simulation  35  --- #>  #> --- Simulation  36  --- #>  #> --- Simulation  37  --- #>  #> --- Simulation  38  --- #>  #> --- Simulation  39  --- #>  #> --- Simulation  40  --- #>  #> --- Simulation  41  --- #>  #> --- Simulation  42  --- #>  #> --- Simulation  43  --- #>  #> --- Simulation  44  --- #>  #> --- Simulation  45  --- #>  #> --- Simulation  46  --- #>  #> --- Simulation  47  --- #>  #> --- Simulation  48  --- #>  #> --- Simulation  49  --- #>  #> --- Simulation  50  ---"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"aggregate-and-summarize-results","dir":"Articles","previous_headings":"","what":"6. Aggregate and summarize results","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"final_results <- do.call(rbind, results)  # Round values and compute residuals between R and Fortran for (j in 1:5) {   est_wide_comparisons[[j]]$R <- round(est_wide_comparisons[[j]]$R, 4)   est_wide_comparisons[[j]]$Mass <- round(est_wide_comparisons[[j]]$Mass, 4)   est_wide_comparisons[[j]]$res <- est_wide_comparisons[[j]]$R - est_wide_comparisons[[j]]$Fortran   est_wide_comparisons[[j]]$res_mass <- est_wide_comparisons[[j]]$Mass - est_wide_comparisons[[j]]$Fortran }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"export-results-to-excel","dir":"Articles","previous_headings":"","what":"7. Export results to Excel","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"write_xlsx(list(   R_Only_Results = final_results,   Estimator1_Comparison = est_wide_comparisons[[1]],   Estimator2_Comparison = est_wide_comparisons[[2]],   Estimator3_Comparison = est_wide_comparisons[[3]],   Estimator4_Comparison = est_wide_comparisons[[4]],   Estimator5_Comparison = est_wide_comparisons[[5]] ), path = \"hisea_r_vs_fortran_results.xlsx\")  cat(\"\\nResults saved to hisea_r_vs_fortran_results.xlsx\\n\") #>  #> Results saved to hisea_r_vs_fortran_results.xlsx"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"visualization-compare-r-vs-fortran-estimators","dir":"Articles","previous_headings":"","what":"8. Visualization: Compare R vs Fortran estimators","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"Comparison R vs Fortran estimates estimator Comparison R vs Fortran estimates estimator Comparison R vs Fortran estimates estimator Comparison R vs Fortran estimates estimator Comparison R vs Fortran estimates estimator","code":"plot_estimator <- function(df, est_label) {   ggplot(df, aes(x = R, y = Fortran, color = Stock)) +     geom_point(size = 2) +     facet_wrap(~Stock) +     geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray40\") +     labs(       title = paste(\"Comparison of\", est_label),       subtitle = \"R vs Fortran (simulated baseline & mixture)\",       x = paste(est_label, \"(R)\"),       y = paste(est_label, \"(Fortran)\")     ) +     theme_minimal(base_size = 13) }  for (j in 1:5) {   print(plot_estimator(est_wide_comparisons[[j]], paste0(\"Estimator \", j))) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"visualization-compare-r_mass-vs-fortran-estimators","dir":"Articles","previous_headings":"","what":"9. Visualization: Compare R_MASS vs Fortran estimators","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"Comparison R_MASS vs Fortran estimates estimator Comparison R_MASS vs Fortran estimates estimator Comparison R_MASS vs Fortran estimates estimator Comparison R_MASS vs Fortran estimates estimator Comparison R_MASS vs Fortran estimates estimator","code":"plot_estimator2 <- function(df, est_label) {   ggplot(df, aes(x = Mass, y = Fortran, color = Stock)) +     geom_point(size = 2) +     facet_wrap(~Stock) +     geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray40\") +     labs(       title = paste(\"Comparison of\", est_label),       subtitle = \"R_MASS vs Fortran (simulated baseline & mixture)\",       x = paste(est_label, \"(R_MASS)\"),       y = paste(est_label, \"(Fortran)\")     ) +     theme_minimal(base_size = 13) }  for (j in 1:5) {   print(plot_estimator2(est_wide_comparisons[[j]], paste0(\"Estimator \", j))) }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"boxplot-for-all-estimators-and-methods","dir":"Articles","previous_headings":"","what":"10. Boxplot for all estimators and methods","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"Boxplot comparing methods across simulations","code":"all_wide <- do.call(rbind, est_wide_comparisons) all_long <- do.call(rbind, est_long_comparisons)  ggplot(all_long, aes(x = Method, y = Value, fill = Method)) +   geom_point(position = position_jitter(width = 0.15), outlier.shape = NA) +   stat_summary(     fun = mean,     geom = \"point\",     shape = 23, size = 3,     fill = \"white\"   ) +   stat_summary(     fun = mean,     geom = \"text\",     aes(label = sprintf(\"%.4f\", after_stat(y))),     hjust = 1.2,     vjust = 0.1,     size = 3   ) +   facet_grid(Estimate ~ Stock) +   theme_minimal() +   labs(     title = \"Comparison of Estimation Methods Across Simulations\",     y = \"Estimated Proportion\",     x = \"Method\"   ) +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"diagnostics-alert-if-large-divergence-detected","dir":"Articles","previous_headings":"","what":"11. Diagnostics: Alert if large divergence detected","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"","code":"threshold <- 0.05  # 5% difference threshold max_diffs <- sapply(est_wide_comparisons, function(df) max(abs(df$R - df$Fortran), na.rm = TRUE))  if (any(max_diffs > threshold)) {   warning(     paste(       \"Warning: Large divergence detected between R and Fortran estimators.\",       \"Maximum differences by estimator:\",       paste0(\"Estimator\", 1:5, \"=\", round(max_diffs, 3), collapse = \"; \")     )   ) } else {   message(\"No large divergences detected between R and Fortran estimators.\") }"},{"path":"https://github.com/SostheneA/RHISEA/articles/RHISEA_vs_Fortran.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Verifying compatibility: RHISEA (R) vs FORTRAN HISEA","text":"vignette provides full workflow simulate, run, compare diagnose HISEA estimation methods R versus original Fortran implementation. results plots help verify consistency quality R implementation, diagnostics alert large discrepancies occur.","code":""},{"path":"https://github.com/SostheneA/RHISEA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sosthene Akia. Author, maintainer. Alex Hanke. Author.","code":""},{"path":"https://github.com/SostheneA/RHISEA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Akia S, Hanke (2025). RHISEA: R Implementation HISEA Mixed Stock Analysis. R package version 0.1.0, https://github.com/SostheneA/RHISEA.","code":"@Manual{,   title = {RHISEA: R Implementation of HISEA for Mixed Stock Analysis},   author = {Sosthene Akia and Alex Hanke},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/SostheneA/RHISEA}, }"},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"rhisea","dir":"","previous_headings":"","what":"RHISEA","title":"RHISEA","text":"“R Package Mixed-Stock Analysis Extending HISEA Flexible Robust Classification Frameworks” RHISEA modernizes extends HISEA flexible, robust classification frameworks estimate source contributions assign individuals stock origin, rigorous uncertainty quantification.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features:","title":"RHISEA","text":"Drop-compatibility classic HISEA (FORTRAN) workflows, plus modern extensions Multiple classification approaches (parametric nonparametric), use model apply HISEA estimators Estimation stock proportions individual assignment uncertainty via bootstrap, cross-validation, simulations Built-diagnostics transparent interpretation Designed fisheries biologists, ecologists, managers, analysts seeking robust, reproducible inferences support decision-making","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"RHISEA","text":"Installation Citation However, classical HISEA important limitations: 1- Flexible Classifier Choice 2- Modern Data Handling 3- Expanded Outputs & Reproducibility 4- Intuitive, Modular Workflow Step--Step Overview (see diagram) Conclusion: RHISEA Advantage","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RHISEA","text":"RHISEA can installed GitHub:","code":"library(devtools) install_github(\"SostheneA/RHISEA\", dependencies = TRUE)"},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"RHISEA","text":"cite RHISEA publications use:","code":"citation(\"RHISEA\")"},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"from-hisea-fortran-to-rhisea-modern-mixed-stock-analysis-in-r","dir":"","previous_headings":"","what":"From HISEA FORTRAN to RHISEA: Modern Mixed-Stock Analysis in R","title":"RHISEA","text":"Mixed-stock analysis fundamental tool fisheries science, allowing estimation contributions source populations mixture samples (e.g., fisheries catches). original HISEA program, implemented FORTRAN, pioneered approach robust statistical framework introduced several estimators (Θ₁ Θ₅) stock proportion inference.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"however-the-classical-hisea-had-important-limitations","dir":"","previous_headings":"","what":"However, the classical HISEA had important limitations:","title":"RHISEA","text":"single built-classifier (LDA/discriminant analysis), requiring variables approximately multivariate normal constant covariance matrices. Limited flexibility integrating modern statistical learning approaches. Rigid input/output based text files (.std, .mix, *.ctl), option save intermediate diagnostic results downstream analysis.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"the-modern-workflow-RHISEA-in-r","dir":"","previous_headings":"","what":"The Modern Workflow: RHISEA in R","title":"RHISEA","text":"RHISEA builds foundation HISEA brings mixed-stock analysis present:","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"the-modern-workflow-rhisea-in-r","dir":"","previous_headings":"","what":"The Modern Workflow: RHISEA in R","title":"RHISEA","text":"RHISEA builds foundation HISEA brings mixed-stock analysis present:","code":""},{"path":[]},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"id_1--flexible-classifier-choice","dir":"","previous_headings":"The Modern Workflow: RHISEA in R > Key Innovations","what":"1- Flexible Classifier Choice","title":"RHISEA","text":"RHISEA, limited LDA. Built-support now exists wide range modern supervised learning classifiers: Linear/Quadratic Discriminant Analysis (LDA, QDA, MASS) Mixture models (MCLUST) Decision Trees (CTREE, CART) Linear/Multinomial Regression (MLR) k-Nearest Neighbors (KNN, kknn) Support Vector Machines (SVM) Random Forests (RF, randomForest) Extreme Gradient Boosting (XGB) Artificial Neural Networks (ANN, nnet) Naive Bayes (NB, e1071) …can even supply trained model prediction function.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"id_2--modern-data-handling","dir":"","previous_headings":"The Modern Workflow: RHISEA in R > Key Innovations","what":"2- Modern Data Handling","title":"RHISEA","text":"can work directly R data frames—need fixed-format text files. However, full compatibility retained: may still use HISEA-formatted files reproducibility validation legacy outputs.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"id_3--expanded-outputs--reproducibility","dir":"","previous_headings":"The Modern Workflow: RHISEA in R > Key Innovations","what":"3- Expanded Outputs & Reproducibility","title":"RHISEA","text":"RHISEA logs final report can save intermediate objects (classification probabilities, confusion matrices, etc.) .rda files downstream diagnostics reproducibility. Results summarized confidence intervals via bootstrap, automated visualizations provided. run parameters, models, derived files can archived full transparency reproducibility.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"id_4--intuitive-modular-workflow","dir":"","previous_headings":"The Modern Workflow: RHISEA in R > Key Innovations","what":"4- Intuitive, Modular Workflow","title":"RHISEA","text":"step process transparent: baseline/mixture data ingestion → classifier choice fitting → estimation classical HISEA estimators (Θ₁: Raw, Θ₂: Cook & Lord, Θ₃: Cook Constrained, Θ₄: EM MillarC, Θ₅: EM ML) → summary report. control every aspect automate .","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"step-by-step-overview-see-diagram","dir":"","previous_headings":"","what":"Step-by-Step Overview (see diagram)","title":"RHISEA","text":"Start: Specify inputs—choose R data frames HISEA .std/.mix control files. Classifier Selection: Easily select define choice classification model stock assignment. Model Training & Validation: Fit classifier baseline data, estimate classification matrix (Φ), validate model accuracy/confusion. Application Mixture: Predict class probabilities mixture, obtain individual assignments posterior probabilities. Estimation: Apply suite HISEA estimators convert classification outputs stock proportion estimates (Θ₁–Θ₅). Summary & Reporting: Save comprehensive summary report, options log intermediate files (.rda). End: Ensure results reproducible, documented, ready interpretation downstream analysis.","code":""},{"path":"https://github.com/SostheneA/RHISEA/index.html","id":"conclusion-the-rhisea-advantage","dir":"","previous_headings":"","what":"Conclusion: The RHISEA Advantage","title":"RHISEA","text":"RHISEA, retain statistical rigor original HISEA - including compatibility reproducibility legacy workflows - gaining flexibility, transparency, analytic power modern R. Advanced users can plug custom classifiers, automate cross-validation, leverage full R ecosystem statistical graphical analysis. intermediate steps traceable archivable robust, audit-friendly science. “Reference: Millar, R.B. (1990),”Versatile Computer Program Mixed Stock Fishery Composition Estimation”, Can. Tech. Rep. Fish. Aquat. Sci. 1753: iii + 29 p.”","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/accel_em_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Accelerated Expectation-Maximization (EM) Algorithm — accel_em_algorithm","title":"Accelerated Expectation-Maximization (EM) Algorithm — accel_em_algorithm","text":"Estimates mixing proportions (theta) using EM algorithm simple acceleration step. acceleration attempted based changes theta iterations log-likelihood improvement. simplified interpretation HISEA's ACCEL subroutine.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/accel_em_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accelerated Expectation-Maximization (EM) Algorithm — accel_em_algorithm","text":"","code":"accel_em_algorithm(   likelihood,   np,   freq = NULL,   max_iter = 100,   tol = 1e-06,   verbose = FALSE,   save_theta_path = NULL )"},{"path":"https://github.com/SostheneA/RHISEA/reference/accel_em_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accelerated Expectation-Maximization (EM) Algorithm — accel_em_algorithm","text":"likelihood numeric matrix (N_rows x N_populations) likelihood[, j] $P(Data_i | Stock_j)$ value proportional . N_rows can N_samples (Theta5) N_populations (Theta4). np Integer, number populations (stocks). match ncol(likelihood). freq Optional numeric vector frequencies/weights \"observation\" (row likelihood). Length must match nrow(likelihood). Defaults rep(1, nrow(likelihood)). max_iter Integer, maximum number iterations EM algorithm. tol Numeric, convergence tolerance. algorithm stops maximum absolute change theta component less tol. verbose Logical, TRUE, prints iteration number current theta estimates. save_theta_path Optional character string. provided, history theta estimates iteration saved CSV file path.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/accel_em_algorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accelerated Expectation-Maximization (EM) Algorithm — accel_em_algorithm","text":"numeric vector estimated stock proportions (theta), length np.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/classify_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Samples Using LDF Coefficients — classify_samples","title":"Classify Samples Using LDF Coefficients — classify_samples","text":"Assigns sample (observation) population/stock based highest Linear Discriminant Function (LDF) score. also computes posterior probabilities (values proportional priors explicitly used).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/classify_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Samples Using LDF Coefficients — classify_samples","text":"","code":"classify_samples(samples, coefs, freq = NULL, type = \"S\")"},{"path":"https://github.com/SostheneA/RHISEA/reference/classify_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Samples Using LDF Coefficients — classify_samples","text":"samples numeric matrix samples classified. Rows observations, columns variables. coefs numeric matrix LDF coefficients, returned compute_ldf_coefficients. Rows populations, columns coefficients variables followed constant term. freq Optional numeric vector frequency weights samples. Defaults 1 sample NULL. (Used mainly HISEA compatibility). type Character, indicates type run (e.g., \"S\" simulation). parameter HISEA Fortran affects condition processing, though impact minor freq positive. Default \"S\".","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/classify_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Samples Using LDF Coefficients — classify_samples","text":"list containing: class integer vector predicted class labels (1 NP) sample. likelihood numeric matrix rows samples columns populations. Contains posterior probabilities class membership (assuming equal priors, rows sum 1).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_cook_estimators.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cook Estimators for Stock Proportions — compute_cook_estimators","title":"Compute Cook Estimators for Stock Proportions — compute_cook_estimators","text":"Computes three types estimators based classification results: Raw proportions: Simple proportion samples classified stock. Cook's corrected estimator: Raw proportions corrected inverse misclassification matrix (Phi_inv). can result negative estimates. Cook's constrained estimator: iterative adjustment Cook's corrected estimator ensure proportions non-negative sum 1.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_cook_estimators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cook Estimators for Stock Proportions — compute_cook_estimators","text":"","code":"compute_cook_estimators(class_predictions, PHIinv, np)"},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_cook_estimators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cook Estimators for Stock Proportions — compute_cook_estimators","text":"class_predictions numeric vector predicted class (stock) labels mixed sample. Values integers 1 np. PHIinv inverse misclassification matrix (Phi). Dimensions np x np. np Integer, number populations (stocks).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_cook_estimators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cook Estimators for Stock Proportions — compute_cook_estimators","text":"list containing three numeric vectors: raw Raw proportions classification. cook Cook's corrected estimates. cook_constrained Cook's constrained estimates (non-negative, sum 1).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_ldf_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","title":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","text":"Computes coefficients Fisher's Linear Discriminant Function group (population/stock). implementation assumes common (pooled) covariance matrix across groups, standard assumption LDA. LDF form: LDF_j(x) = C_j0 + C_j1x1 + ... + C_jpxp.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_ldf_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","text":"","code":"compute_ldf_coefficients(baseline)"},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_ldf_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","text":"baseline list numeric matrices, matrix represents baseline (training) data one population/stock. matrix observations rows variables columns.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_ldf_coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","text":"numeric matrix LDF coefficients. Rows correspond populations, columns correspond variables followed constant term. dimensions (np x (nv + 1)).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/compute_ldf_coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Linear Discriminant Function (LDF) Coefficients — compute_ldf_coefficients","text":"","code":"# Create dummy baseline data for 2 stocks with 2 variables stock1_data <- matrix(rnorm(20, mean = 0), ncol = 2) stock2_data <- matrix(rnorm(20, mean = 1), ncol = 2) baseline_list <- list(StockA = stock1_data, StockB = stock2_data) # Named list ldf_coeffs <- compute_ldf_coefficients(baseline_list) print(ldf_coeffs) #>              Var1       Var2    Constant #> StockA -0.3372579 -0.1410113 -0.06554944 #> StockB  1.0428377  1.1710608 -1.10531500"},{"path":"https://github.com/SostheneA/RHISEA/reference/create_hisea_summary_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create HISEA Summary Report — create_hisea_summary_report","title":"Create HISEA Summary Report — create_hisea_summary_report","text":"Generates comprehensive summary HISEA estimation results, including means, standard deviations, MSE (simulations), covariance/correlation ML estimates (often bootstrap).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/create_hisea_summary_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create HISEA Summary Report — create_hisea_summary_report","text":"","code":"create_hisea_summary_report(   all_estimates_array,   actual_proportions = NULL,   run_type )"},{"path":"https://github.com/SostheneA/RHISEA/reference/create_hisea_summary_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create HISEA Summary Report — create_hisea_summary_report","text":"all_estimates_array array dimension (nsamps, np, n_estimators) containing estimation results. 3rd dimension estimator names. actual_proportions Optional numeric vector true stock proportions. Required MSE calculated (typically \"SIMULATION\" run_type). run_type Character string, e.g., \"SIMULATION\", \"ANALYSIS\", \"BOOTSTRAP\". Used decide actual_proportions expected MSE.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/create_hisea_summary_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create HISEA Summary Report — create_hisea_summary_report","text":"list containing summary statistics.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/dot-resample_baseline_data_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","title":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","text":"main wrapper function core set utilities running HISEA mixed-stock analysis framework, allowing simulation, analysis, bootstrap estimation stock composition mixture samples. Supported operation modes: SIMULATION: Simulate mixtures based known proportions evaluate performance classification estimators. ANALYSIS: Apply trained classifier real mixture data estimate stock proportions. BOOTSTRAP: Resample real mixture evaluate variability estimates. Supported classifiers: LDA, QDA, Random Forest, SVM, k-NN, ANN, XGBoost, Naive Bayes, Mclust, MLR. Supported estimators: RAW, Cook, Constrained Cook, EM (Millar), Maximum Likelihood. Includes integrated 10-fold cross-validation model quality evaluation (accuracy, kappa, F1, etc.).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/dot-resample_baseline_data_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","text":"","code":".resample_baseline_data_helper(   original_baseline_list,   resampled_sizes,   stock_names_for_error,   nv_fallback )"},{"path":"https://github.com/SostheneA/RHISEA/reference/dot-resample_baseline_data_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","text":"type Character. \"SIMULATION\", \"ANALYSIS\" \"BOOTSTRAP\". np Integer. Number populations (stocks). nv Integer. Number variables. seed_val Integer. Random seed reproducibility. nsamps Integer. Number replicates. Nmix Integer. Sample size simulated mixture (SIMULATION ). actual Numeric vector. True proportions used simulation. baseline_path Character. File path baseline .std file. mix_path Character. File path mixture .mix file. export_csv Logical. Whether export summary confusion matrix CSV. output_dir Character. Output directory. verbose Logical. Print progress messages. method_class Character. Classification method (e.g., \"LDA\", \"RF\", \"SVM\", etc.). stocks_names Character vector. Optional vector stock names. resample_baseline Logical. Resample baseline replicate. resampled_baseline_sizes Integer vector. Sizes resamples per stock. phi_method Character. \"standard\" \"cv\" (cross-validation-based confusion matrix). mclust_model_names Character vector. Models test Mclust. mclust_perform_cv Logical. Whether cross-validate Mclust.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/dot-resample_baseline_data_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","text":"list : estimation_summary Summary table mean, SD, RMSE estimates. classification_model Final trained classifier object. baseline_classification_quality Accuracy, Kappa, per-class metrics. phi_matrix Estimated confusion matrix used corrections. mixture_classification_details List predicted pseudo-classes likelihoods. .rda file results also saved output_dir.","code":""},{"path":[]},{"path":"https://github.com/SostheneA/RHISEA/reference/dot-resample_baseline_data_helper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run HISEA Mixed Stock Analysis — .resample_baseline_data_helper","text":"","code":"if (FALSE) { # \\dontrun{ run_hisea_all(type=\"SIMULATION\",              np=3, nv=5,              actual=c(0.2,0.3,0.5),              Nmix=200,              baseline_path=\"baseline.std\",              method_class=\"RF\",              resample_baseline=TRUE,              resampled_baseline_sizes=c(100,100,100),              output_dir=\"results\") } # }"},{"path":"https://github.com/SostheneA/RHISEA/reference/em_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Expectation-Maximization (EM) Algorithm for Stock Proportions — em_algorithm","title":"Standard Expectation-Maximization (EM) Algorithm for Stock Proportions — em_algorithm","text":"Estimates mixing proportions (theta) likelihood matrix using EM algorithm.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/em_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Expectation-Maximization (EM) Algorithm for Stock Proportions — em_algorithm","text":"","code":"em_algorithm(   likelihood,   np,   freq = NULL,   max_iter = 100,   tol = 1e-06,   verbose = FALSE,   save_theta_path = NULL )"},{"path":"https://github.com/SostheneA/RHISEA/reference/em_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Expectation-Maximization (EM) Algorithm for Stock Proportions — em_algorithm","text":"likelihood numeric matrix (N_rows x N_populations) likelihood[, j] $P(Data_i | Stock_j)$ value proportional . N_rows can N_samples (Theta5) N_populations (Theta4). np Integer, number populations (stocks). match ncol(likelihood). freq Optional numeric vector frequencies/weights \"observation\" (row likelihood). Length must match nrow(likelihood). Defaults rep(1, nrow(likelihood)). max_iter Integer, maximum number iterations EM algorithm. tol Numeric, convergence tolerance. algorithm stops maximum absolute change theta component less tol. verbose Logical, TRUE, prints iteration number current theta estimates. save_theta_path Optional character string. provided, history theta estimates iteration saved CSV file path.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/em_algorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard Expectation-Maximization (EM) Algorithm for Stock Proportions — em_algorithm","text":"numeric vector estimated stock proportions (theta), length np.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_millar_theta4.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","title":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","text":"function estimates theta4 parameter using Millar method.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_millar_theta4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","text":"","code":"estimate_millar_theta4(   class_predictions_mixed_sample,   PHI_matrix,   np,   use_accelerated_em = TRUE,   ... )"},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_millar_theta4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","text":"class_predictions_mixed_sample Numeric vector predicted classes mixed sample PHI_matrix Confusion matrix used correction np Integer number populations use_accelerated_em Logical; whether use accelerated EM version ... Additional arguments passed internal functions","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_millar_theta4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","text":"Numeric value estimated theta4 parameter","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_millar_theta4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Millar Theta4 Parameter — estimate_millar_theta4","text":"","code":"if (FALSE) { # \\dontrun{ pred_classes <- c(1, 2, 1, 2) phi_mat <- matrix(c(0.8, 0.2, 0.2, 0.8), 2, 2) theta4 <- estimate_millar_theta4(pred_classes, phi_mat, np = 2) } # }"},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_ml_theta5.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Stock Composition Using Direct Maximum Likelihood (Theta5) — estimate_ml_theta5","title":"Estimate Stock Composition Using Direct Maximum Likelihood (Theta5) — estimate_ml_theta5","text":"Applies EM algorithm obtain direct Maximum Likelihood Estimate (MLE) stock proportions (Theta_5 HISEA). uses likelihood individual mixed fishery sample fish belonging stock. likelihood maximized :","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_ml_theta5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Stock Composition Using Direct Maximum Likelihood (Theta5) — estimate_ml_theta5","text":"","code":"estimate_ml_theta5(   individual_likelihoods,   np,   freq = NULL,   use_accelerated_em = TRUE,   ... )"},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_ml_theta5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Stock Composition Using Direct Maximum Likelihood (Theta5) — estimate_ml_theta5","text":"individual_likelihoods numeric matrix (N_mixed_samples x NP) individual_likelihoods[,j] $P(Data_i | Stock_j)$, likelihood observing data mixed sample fish given came stock j. np Integer, number populations (stocks). freq Optional numeric vector frequencies/weights sample (row) individual_likelihoods. Defaults rep(1, nrow(individual_likelihoods)). use_accelerated_em Logical, TRUE, uses accel_em_algorithm, otherwise em_algorithm. Default TRUE. ... Additional arguments passed chosen EM algorithm (e.g., max_iter, tol, verbose, save_theta_path).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/estimate_ml_theta5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Stock Composition Using Direct Maximum Likelihood (Theta5) — estimate_ml_theta5","text":"numeric vector estimated stock proportions (Theta5).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/get_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Phi Matrix — get_phi","title":"Get Phi Matrix — get_phi","text":"Calculate phi matrix stock composition analysis.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/get_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Phi Matrix — get_phi","text":"","code":"get_phi(predicted_class, true_labels, np)"},{"path":"https://github.com/SostheneA/RHISEA/reference/get_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Phi Matrix — get_phi","text":"predicted_class Integer vector predictions true_labels Factor true labels np Number populations (levels)","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/get_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Phi Matrix — get_phi","text":"Matrix phi values","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/get_phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Phi Matrix — get_phi","text":"","code":"if (FALSE) { # \\dontrun{ pred <- c(1, 2, 1, 2) true <- c(1, 2, 1, 1) phi_matrix <- get_phi(pred, true, np = 2) } # }"},{"path":"https://github.com/SostheneA/RHISEA/reference/ordvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Ordered Random Values (Order Statistics based) — ordvec","title":"Generate Ordered Random Values (Order Statistics based) — ordvec","text":"Produces ordered vector num random values, scaled approximately 0 upper. function can used basis certain types random sampling schemes. logic similar generating order statistics exponential distribution.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/ordvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Ordered Random Values (Order Statistics based) — ordvec","text":"","code":"ordvec(num, upper)"},{"path":"https://github.com/SostheneA/RHISEA/reference/ordvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Ordered Random Values (Order Statistics based) — ordvec","text":"num Integer, number ordered values generate. upper Numeric, maximum value scaled output. generated values approximate range (0, upper].","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/ordvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Ordered Random Values (Order Statistics based) — ordvec","text":"numeric vector length num, containing ordered values scaled approximately 0 upper.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/ordvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Ordered Random Values (Order Statistics based) — ordvec","text":"","code":"ordvec(5, 100) # Generates 5 ordered numbers, max value around 100 #> [1]  0.06547516 42.52867174 57.17789557 60.90528288 68.28693648 ordvec(10, 10) # Generates 10 ordered numbers, max value around 10 #>  [1] 0.6081884 0.7902343 4.3967765 5.1593303 5.3771760 5.5845999 6.4986165 #>  [8] 8.0324132 8.9109897 9.3164617"},{"path":"https://github.com/SostheneA/RHISEA/reference/plot_hisea_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot HISEA theta estimates with error bars utils::globalVariables(c(","title":"Plot HISEA theta estimates with error bars utils::globalVariables(c(","text":"Plot HISEA theta estimates error bars utils::globalVariables(c(\"Stock\", \"Mean\", \"Estimator\", \"SD\", \"ActualValue\"))","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/plot_hisea_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot HISEA theta estimates with error bars utils::globalVariables(c(","text":"","code":"plot_hisea_theta(summary_report, stock_names = NULL, actual_proportions = NULL)"},{"path":"https://github.com/SostheneA/RHISEA/reference/plot_hisea_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot HISEA theta estimates with error bars utils::globalVariables(c(","text":"summary_report Output codecreate_hisea_summary_report. stock_names Optional character vector stock labels. actual_proportions Optional numeric vector true proportions.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/plot_hisea_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot HISEA theta estimates with error bars utils::globalVariables(c(","text":"ggplot object.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/print_hisea_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print HISEA Summary Report to Console and/or File — print_hisea_summary","title":"Print HISEA Summary Report to Console and/or File — print_hisea_summary","text":"Print HISEA Summary Report Console /File","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/print_hisea_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print HISEA Summary Report to Console and/or File — print_hisea_summary","text":"","code":"print_hisea_summary(   summary_report,   nsamps,   actual_proportions,   means_vars = NULL,   sds_vars = NULL,   standard_sizes = NULL,   stocks_names,   output_file = \"hisea_summary_report.txt\",   header = NULL,   run_type = \"SIMULATION\",   nv_used = NULL,   seed_val = NULL,   nmix_simulated = NULL )"},{"path":"https://github.com/SostheneA/RHISEA/reference/print_hisea_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print HISEA Summary Report to Console and/or File — print_hisea_summary","text":"summary_report Output codecreate_hisea_summary_report. nsamps Number simulation/bootstrap replicates. actual_proportions True composition vector. means_vars Matrix mean variable values. sds_vars Matrix SD variable values. standard_sizes Vector baseline sample sizes. stocks_names Character vector stock names. output_file Path output text file. header Optional custom header line. run_type Character string run type. nv_used Integer, number variables. seed_val Integer, seed value. nmix_simulated Integer, size simulated mixture.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/process_hisea_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Process HISEA Input Data — process_hisea_input","title":"Process HISEA Input Data — process_hisea_input","text":"Process HISEA Input Data","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/process_hisea_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process HISEA Input Data — process_hisea_input","text":"","code":"process_hisea_input(   input,   type = c(\"std\", \"mix\"),   nv = NULL,   stock_col = NULL,   var_cols_mix = NULL,   var_cols_std = NULL )"},{"path":"https://github.com/SostheneA/RHISEA/reference/process_hisea_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process HISEA Input Data — process_hisea_input","text":"input Input data (file path data frame) type Type input (\"std\" \"mix\") nv Number variables stock_col Stock column name var_cols_mix Variables mixture data var_cols_std Variables standard data out_path Output path stocks_names Stock names","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/process_hisea_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process HISEA Input Data — process_hisea_input","text":"Processed data","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Read HISEA Baseline File — read_baseline","title":"Read HISEA Baseline File — read_baseline","text":"Reads HISEA-formatted baseline (standard) data file. file expected contain data multiple stocks/populations, data stock separated delimiter string (e.g., \"NEXT STOCK\"). Blank lines lines starting '#' (comments) ignored.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read HISEA Baseline File — read_baseline","text":"","code":"read_baseline(filepath, nv)"},{"path":"https://github.com/SostheneA/RHISEA/reference/read_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read HISEA Baseline File — read_baseline","text":"filepath Character string, path baseline .std file. nv Integer, number variables (columns) expected observation baseline data.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read HISEA Baseline File — read_baseline","text":"list numeric matrices. matrix list corresponds stock/population, rows observations columns variables. Returns empty list valid data found errors occur parsing.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Read HISEA Mixture File — read_mixture","title":"Read HISEA Mixture File — read_mixture","text":"Reads HISEA-formatted mixture data file. attempts extract lines containing numeric data (typical HISEA mixture files) converts numeric matrix.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read HISEA Mixture File — read_mixture","text":"","code":"read_mixture(filepath = \"hisea.mix\", nv)"},{"path":"https://github.com/SostheneA/RHISEA/reference/read_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read HISEA Mixture File — read_mixture","text":"filepath Character string, path mixture .mix file. nv Integer, number variables (columns) expected observation mixture data.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/read_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read HISEA Mixture File — read_mixture","text":"numeric matrix rows observations columns variables. Returns empty matrix (nv columns) valid data found errors occur.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Main Function for HISEA Run — run_hisea_all","title":"Internal Main Function for HISEA Run — run_hisea_all","text":"full analysis/simulation/bootstrap run Run Complete HISEA Stock Composition Analysis function performs comprehensive stock composition analysis using various statistical methods including LDA, Random Forest, SVM, XGBoost, others.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Main Function for HISEA Run — run_hisea_all","text":"","code":"run_hisea_all(   type = \"ANALYSIS\",   np,   nv,   seed_val = 123456,   var_cols_std = NULL,   var_cols_mix = NULL,   stock_col = NULL,   nsamps = 1000,   Nmix = 100,   actual = NULL,   baseline_input = NULL,   mix_input = NULL,   export_csv = FALSE,   output_dir = \".\",   verbose = FALSE,   method_class = \"LDA\",   stocks_names = NULL,   resample_baseline = FALSE,   resampled_baseline_sizes = NULL,   phi_method = c(\"standard\", \"cv\"),   mclust_model_names = NULL,   mclust_perform_cv = TRUE )"},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Main Function for HISEA Run — run_hisea_all","text":"type Character. Type analysis perform. Default: \"ANALYSIS\" np Integer. Number populations/stocks. Default: 2 nv Integer. Number variables/loci. Default: 2 seed_val Integer. Random seed reproducibility. Default: 123456 var_cols_std Character vector column names baseline variables var_cols_mix Character vector column names mixture variables stock_col Character name stock column baseline data nsamps Integer. Number bootstrap samples. Default: 1000 Nmix Integer. Size mixture sample. Default: 100 actual Numeric vector. True composition proportions. Default: c(0.5, 0.5) baseline_input Data frame file path baseline data mix_input Data frame file path mixture data export_csv Logical. Whether export results CSV. Default: TRUE output_dir Character. Output directory path. Default: getwd() verbose Logical. Whether print progress messages. Default: TRUE method_class Character. Classification method (\"LDA\", \"RF\", \"SVM\", etc.). Default: \"LDA\" stocks_names Character vector. Names stocks. Default: NULL resample_baseline Logical. Whether resample baseline data. Default: FALSE resampled_baseline_sizes Integer vector. Sizes resampled baseline. Default: NULL phi_method Character. Method phi calculation. Default: \"default\" mclust_model_names Character vector. Model names mclust. Default: NULL mclust_perform_cv Logical. Whether perform cross-validation mclust. Default: FALSE","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Main Function for HISEA Run — run_hisea_all","text":"List containing: estimates Matrix stock composition estimates mean Mean estimates across bootstrap samples sd Standard deviations estimates performance Performance metrics applicable","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal Main Function for HISEA Run — run_hisea_all","text":"","code":"if (FALSE) { # \\dontrun{ # Basic analysis with LDA result <- run_hisea_all(   np = 2,   nv = 3,   method_class = \"LDA\",   baseline_path = \"my_baseline.txt\",   mix_path = \"my_mixture.txt\" ) } # }"},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Run HISEA Estimations Only — run_hisea_estimates","title":"Run HISEA Estimations Only — run_hisea_estimates","text":"Run HISEA Estimations ","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run HISEA Estimations Only — run_hisea_estimates","text":"","code":"run_hisea_estimates(   pseudo_classes,   likelihoods,   phi_matrix,   np,   type = \"ANALYSIS\",   nsamps = 1000,   stocks_names = NULL,   export_csv = FALSE,   output_dir = \".\",   verbose = FALSE )"},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run HISEA Estimations Only — run_hisea_estimates","text":"pseudo_classes Vector predicted classes (integers) likelihoods Matrix prediction probabilities phi_matrix Confusion matrix (Phi) np Number populations type \"ANALYSIS\", \"SIMULATION\" \"BOOTSTRAP\" nsamps Number samples (default: 1000) stocks_names Names stocks/populations export_csv Export results CSV output_dir Output directory verbose Print progress messages","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/run_hisea_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run HISEA Estimations Only — run_hisea_estimates","text":"List containing estimates metrics","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/simulate_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","title":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","text":"Creates synthetic fishery mixture sampling individuals different baseline stocks according specified true proportions. Sampling stock done replacement.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/simulate_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","text":"","code":"simulate_mixture(baseline_data_list, actual_proportions, N_mixture_size)"},{"path":"https://github.com/SostheneA/RHISEA/reference/simulate_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","text":"baseline_data_list list numeric matrices. matrix represents baseline (standard) data one stock/population, observations rows variables columns. actual_proportions numeric vector true proportions stock mixture. Must sum 1 length baseline_data_list. N_mixture_size Integer, total number individuals draw synthetic mixture.","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/simulate_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","text":"numeric matrix representing simulated mixture sample. Rows individuals, columns variables. Returns error mixture formed (e.g., due empty baseline stocks needed sampling).","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/simulate_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Mixed Fishery Sample from Known Stock Proportions — simulate_mixture","text":"","code":"# Dummy baseline data stock1 <- matrix(rnorm(20 * 2, mean = 0, sd = 1), ncol = 2) # Assuming 2 variables stock2 <- matrix(rnorm(30 * 2, mean = 2, sd = 1), ncol = 2) # Assuming 2 variables baseline_list_ex <- list(stock1, stock2) true_props_ex <- c(0.6, 0.4) # 60% from stock1, 40% from stock2 mixture_N_ex <- 100 # simulated_sample_ex <- simulate_mixture(baseline_list_ex, true_props_ex, mixture_N_ex) # print(head(simulated_sample_ex)) # print(nrow(simulated_sample_ex)) # Should be close to 100"},{"path":"https://github.com/SostheneA/RHISEA/reference/write_mix_from_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Mixture Data to File — write_mix_from_dataframe","title":"Write Mixture Data to File — write_mix_from_dataframe","text":"Write Mixture Data File","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/write_mix_from_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Mixture Data to File — write_mix_from_dataframe","text":"","code":"write_mix_from_dataframe(df, var_cols_mix, file_path = \"hisea.mix\")"},{"path":"https://github.com/SostheneA/RHISEA/reference/write_mix_from_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Mixture Data to File — write_mix_from_dataframe","text":"df Data frame var_cols_mix Variables write file_path Output file path","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/write_mix_from_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Mixture Data to File — write_mix_from_dataframe","text":"None","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/write_std_from_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Standard Data to File — write_std_from_dataframe","title":"Write Standard Data to File — write_std_from_dataframe","text":"Write Standard Data File","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/write_std_from_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Standard Data to File — write_std_from_dataframe","text":"","code":"write_std_from_dataframe(df, stock_col, var_cols_std, file_path = \"hisea.std\")"},{"path":"https://github.com/SostheneA/RHISEA/reference/write_std_from_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Standard Data to File — write_std_from_dataframe","text":"df Data frame stock_col Stock column var_cols_std Variables write file_path Output file path","code":""},{"path":"https://github.com/SostheneA/RHISEA/reference/write_std_from_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Standard Data to File — write_std_from_dataframe","text":"None","code":""}]
